openapi: 3.0.0
info:
  title: Swagger Petstore - OpenAPI 3.0
  version: "0.1"
  description: This is a sample Pet Store Server based on the OpenAPI 3.0 specification.

servers:
  - url: http://localhost:3001

paths:
  /pet/add:
    post:
      summary: Add a new pet with correct response
      description: Add a new pet to the store
      operationId: addPet
      responses:
        "200":
          $ref: "#/components/responses/200"
      requestBody:
        description: Create a new pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      security:
        - jwt: []
      x-ft-security:
        authenticated-principal-path: user.userId
      x-ft-sensitive-headers:
        - X-Pet-Store-Secret-Key
  /pet/add/broken:
    post:
      summary: Add a new pet with broken response
      description: Add a new pet to the store
      operationId: addPetBroken
      responses:
        "200":
          $ref: "#/components/responses/200"
      requestBody:
        description: Create a new pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      security:
        - jwt: ["write"]
      x-ft-security:
        authenticated-principal-path: user.userId
      x-ft-sensitive-headers:
        - X-Pet-Store-Secret-Key
  "/pet/{petId}/get-with-user-id-based-auth":
    get:
      summary: Find pet with user ID based authorisation
      description: Returns a single pet if ownerId == userId
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/200"
        "404":
          $ref: "#/components/responses/404"
      security:
        - jwt: []
      x-ft-security:
        access-resolver: petAccess
        authenticated-principal-path: user.userId
        resource-authorised-principal-path: ownerId
  "/pet/{petId}/get-with-tag-based-auth":
    get:
      summary: Find pet with tag based authorisation
      description: Returns a single pet is user has access to any of pet's tags
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/200"
        "404":
          $ref: "#/components/responses/404"
      security:
        - jwt: []
      x-ft-security:
        access-resolver: petAccessByTag
        authenticated-principal-path: user.userId

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
    appId:
      type: apiKey
      in: header
      name: X-APP-ID
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
    oAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            read_pets: read pets in your account
            write_pets: modify pets in your account
    oAuthMulti:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.getbase.com/oauth2/client_credentials
          scopes:
            read: Grant read-only access to all your data except for the account and user info
            write: Grant write-only access to all your data except for the account and user info
            profile: Grant read-only access to the account and user info only
        password:
          tokenUrl: https://api.getbase.com/oauth2/token
          scopes:
            read: Grant read-only access to all your data except for the account and user info
            write: Grant write-only access to all your data except for the account and user info
            profile: Grant read-only access to the account and user info only
  schemas:
    Category:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    Tag:
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Pet:
      additionalProperties: false
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 5
          example: 10
        timesFetched:
          type: integer
          format: int64
          example: 10
          readOnly: true
        name:
          type: string
          pattern: (dog|cat)
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
  responses:
    "200":
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
    "404":
      description: Request failed
      content:
        text/plain:
          schema:
            type: string
